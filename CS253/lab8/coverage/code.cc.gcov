        -:    0:Source:code.cc
        -:    0:Graph:code.gcno
        -:    0:Data:code.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <time.h>
        -:    4:#include <cassert>
        -:    5:#include <sstream>
        -:    6:using namespace std;
        -:    7:
        -:    8:class Date {
        -:    9:  public:
        -:   10:    Date();
        -:   11:    // Default copy ctor is fine
        -:   12:    // Default assignment operator is fine
        -:   13:    Date(int year, int month, int day);
        -:   14:
        -:   15:    int getday() const;
        -:   16:    int getmonth() const;
        -:   17:    int getyear() const;
        -:   18:
        -:   19:    void setday(int);
        -:   20:    void setmonth(int);
        -:   21:    void setyear(int);
        -:   22:
        -:   23:    Date &operator+=(int);
        -:   24:    int operator-(const Date &) const;
        -:   25:
        -:   26:    Date operator+(int) const;
        -:   27:    const Date &operator++();	// prefix
        -:   28:    Date operator++(int);		// postfix
        -:   29:
        -:   30:    Date operator-(int) const;
        -:   31:    Date &operator-=(int);
        -:   32:    const Date &operator--();	// prefix
        -:   33:    Date operator--(int);		// postfix
        -:   34:
        -:   35:    bool operator<(const Date &) const;
        -:   36:    bool operator<=(const Date &) const;
        -:   37:    bool operator>(const Date &) const;
        -:   38:    bool operator>=(const Date &) const;
        -:   39:    bool operator==(const Date &) const;
        -:   40:    bool operator!=(const Date &) const;
        -:   41:
        -:   42:  protected:
        -:   43:    static int ymd_to_daynum(int year, int month, int day);
        -:   44:    int daynum;				// 1 = January 1, year 1
        -:   45:};
        -:   46:
        -:   47:Date operator+(int, const Date &);
        -:   48:ostream &operator<<(ostream &out, const Date &);	// YYYY-MM-DD
        -:   49:istream &operator>>(istream &in, Date &);		// YYYY-MM-DD
        -:   50:
   324759:   51:static bool leap(int year) {
   324759:   52:    assert(1 <= year && year <= 9999);
        -:   53:/*    if (year % 400 == 0)			// Divisible by 400?
        -:   54:        return true;				// It’s a leap year.
        -:   55:    if (year % 100 == 0)			// Divisible by 100?
        -:   56:        return false;				// Not a leap year.
        -:   57:    if (year % 4 == 0)				// Divisible by 4?
        -:   58:        return true;				// It’s a leap year.
        -:   59:    return false;				// Boring old ordinary year.
        -:   60:    */
   324759:   61:    if(year % 4 != 0) {
   244906:   62:        return false;
        -:   63:    }
    79853:   64:    if(year % 100 == 0) {
     3180:   65:        if(year % 400 == 0) {
      795:   66:            return true;
        -:   67:        }
     2385:   68:        return false;
        -:   69:    }
    76673:   70:    return false;
        -:   71:    
        -:   72:}
        -:   73:
   319426:   74:static int days_per_year(int year) {
   319426:   75:    assert(1 <= year && year <= 9999);
   319426:   76:    return leap(year) ? 366 : 365;
        -:   77:}
        -:   78:
    32342:   79:static int days_per_month(int year, int month) {
    32342:   80:    assert(1 <= year && year <= 9999);
    32342:   81:    assert(1 <= month && month <= 12);
    32342:   82:    const int days[] = {00,31,28,31,30,31,30,31,31,30,31,30,31};
    32342:   83:    if (month==2 && leap(year))
    #####:   84:	return 29;
    32342:   85:    return days[month];
        -:   86:}
        -:   87:
       55:   88:int Date::ymd_to_daynum(int year, int month, int day) {
       55:   89:    assert(1 <= year && year <= 9999);
       55:   90:    assert(1 <= month && month <= 12);
       55:   91:    assert(1 <= day && day <= 31);
        -:   92:
        -:   93:    // Start at Jan 1, 0001, and increment until we get to what we want
       55:   94:    int daynum=1;
        -:   95:
    60344:   96:    for (int y=1; y < year; y++)
    60289:   97:	daynum += days_per_year(y);
        -:   98:
      365:   99:    for (int m=1; m < month; m++)
      310:  100:	daynum += days_per_month(year, m);
        -:  101:
        -:  102:    // We're now poised at the first day of that month
       55:  103:    daynum += day-1;
        -:  104:
       55:  105:    assert(1 <= daynum && daynum <= 10000 * 366);
       55:  106:    return daynum;
        -:  107:}
        -:  108:
      207:  109:static void daynum_to_ymd(int daynum, int &year, int &month, int &day) {
      207:  110:    assert(1 <= daynum && daynum <= 10000 * 366);
        -:  111:
      207:  112:    int y=1, m=1, d=1;
        -:  113:
      207:  114:if (daynum > 366) {
        -:  115:    // Jump forward by years, at first.  This reduces the iterations,
        -:  116:    // for modern dates, from ~733k to ~2181.
   518409:  117:    while (daynum >= 366)
   259137:  118:	daynum -= days_per_year(y++);
        -:  119:    }
        -:  120://endif
        -:  121:
    64271:  122:    for (; daynum>1; daynum--) {
        -:  123:	// Increment y-m-d
    32032:  124:	d++;
    32032:  125:	if (d > days_per_month(y, m)) {
      973:  126:	    m++;
      973:  127:	    d=1;
      973:  128:	    if (m > 12) {
    #####:  129:		y++;
    #####:  130:		m=1;
        -:  131:	    }
        -:  132:	}
        -:  133:    }
        -:  134:
      207:  135:    year = y;
      207:  136:    month = m;
      207:  137:    day = d;
        -:  138:
      207:  139:    assert(1 <= year && year <= 9999);
      207:  140:    assert(1 <= month && month <= 12);
      207:  141:    assert(1 <= day && day <= 31);
      207:  142:}
        -:  143:
       49:  144:Date::Date(int year, int month, int day)
       49:  145:: daynum(ymd_to_daynum(year, month, day)) {
       49:  146:    assert(1 <= year && year <= 9999);
       49:  147:    assert(1 <= month && month <= 12);
       49:  148:    assert(1 <= day && day <= 31);
       49:  149:    assert(1 <= daynum && daynum <= 10000 * 366);
       49:  150:}
        -:  151:
        3:  152:Date::Date() {
        3:  153:    const time_t now = time(nullptr);	    // Seconds since 1970 started
        3:  154:    struct tm *tm = localtime(&now);	    // year/month/day/hour/min/sec
        3:  155:    daynum = ymd_to_daynum(tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday);
        -:  156:    // Yes, 1900.  That’s not a Y2K bug--that’s how localtime is defined.
        3:  157:}
        -:  158:
       68:  159:int Date::getday() const {
        -:  160:    int year, month, day;
       68:  161:    daynum_to_ymd(daynum, year, month, day);
       68:  162:    return day;
        -:  163:}
        -:  164:
       68:  165:int Date::getmonth() const {
        -:  166:    int year, month, day;
       68:  167:    daynum_to_ymd(daynum, year, month, day);
       68:  168:    return month;
        -:  169:}
        -:  170:
       68:  171:int Date::getyear() const {
        -:  172:    int year, month, day;
       68:  173:    daynum_to_ymd(daynum, year, month, day);
       68:  174:    return year;
        -:  175:}
        -:  176:
        1:  177:void Date::setday(int new_day) {
        -:  178:    int year, month, day;
        1:  179:    daynum_to_ymd(daynum, year, month, day);
        1:  180:    daynum = ymd_to_daynum(year, month, new_day);
        1:  181:}
        -:  182:
        1:  183:void Date::setmonth(int new_month) {
        -:  184:    int year, month, day;
        1:  185:    daynum_to_ymd(daynum, year, month, day);
        1:  186:    daynum = ymd_to_daynum(year, new_month, day);
        1:  187:}
        -:  188:
        1:  189:void Date::setyear(int new_year) {
        -:  190:    int year, month, day;
        1:  191:    daynum_to_ymd(daynum, year, month, day);
        1:  192:    daynum = ymd_to_daynum(new_year, month, day);
        1:  193:}
        -:  194:
        -:  195:// This one stands alone
        -:  196:
        2:  197:int Date::operator-(const Date &rhs) const {
        2:  198:    return daynum - rhs.daynum;
        -:  199:}
        -:  200:
        -:  201:// This does the real work of all numeric operations.
        -:  202:// All other operators (+, -, ++, -=, etc) should invoke operator+=.
        -:  203:
       10:  204:Date &Date::operator+=(int value) {
       10:  205:    daynum += value;
       10:  206:    return *this;
        -:  207:}
        -:  208:
        3:  209:Date Date::operator+(int value) const {
        3:  210:    Date result = *this;
        3:  211:    return result += value;
        -:  212:}
        -:  213:
        1:  214:const Date &Date::operator++() {			// prefix
        1:  215:    *this += 1;
        1:  216:    return *this;
        -:  217:}
        -:  218:
        1:  219:Date Date::operator++(int /* dummy */) {		// postfix
        1:  220:    const auto before = *this;
        1:  221:    *this += 1;
        1:  222:    return before;
        -:  223:}
        -:  224:
        1:  225:Date Date::operator-(int value) const {
        1:  226:    return *this + -value;
        -:  227:}
        -:  228:
        4:  229:Date &Date::operator-=(int value) {
        4:  230:    return *this += -value;
        -:  231:}
        -:  232:
        1:  233:const Date &Date::operator--() {			// prefix
        1:  234:    *this -= 1;
        1:  235:    return *this;
        -:  236:}
        -:  237:
        1:  238:Date Date::operator--(int /* dummy */) {		// postfix
        1:  239:    Date before = *this;
        1:  240:    *this -= 1;
        1:  241:    return before;
        -:  242:}
        -:  243:
        -:  244:
        2:  245:bool Date::operator<(const Date &rhs) const {
        2:  246:    return daynum < rhs.daynum;
        -:  247:}
        -:  248:
        3:  249:bool Date::operator<=(const Date &rhs) const {
        3:  250:    return daynum <= rhs.daynum;
        -:  251:}
        -:  252:
        2:  253:bool Date::operator>(const Date &rhs) const {
        2:  254:    return daynum > rhs.daynum;
        -:  255:}
        -:  256:
        3:  257:bool Date::operator>=(const Date &rhs) const {
        3:  258:    return daynum >= rhs.daynum;
        -:  259:}
        -:  260:
        2:  261:bool Date::operator==(const Date &rhs) const {
        2:  262:    return daynum == rhs.daynum;
        -:  263:}
        -:  264:
        2:  265:bool Date::operator!=(const Date &rhs) const {
        2:  266:    return daynum != rhs.daynum;
        -:  267:}
        -:  268:
    #####:  269:Date operator+(int value, const Date &rhs) {
    #####:  270:    return rhs + value;
        -:  271:}
        -:  272:
       68:  273:ostream &operator<<(ostream &out, const Date &d) {
       68:  274:    return out << d.getyear() << '-' << d.getmonth() << '-' << d.getday();
        -:  275:}
        -:  276:
        -:  277:#include <iomanip>
        -:  278:
       51:  279:istream &operator>>(istream &in, Date &d) {
        -:  280:    int year, month, day;
        -:  281:    char c1, c2;
      151:  282:    if (in >> year  >> c1 && c1=='-'
       48:  283:     && in >> month >> c2 && c2=='-'
       99:  284:     && in >> day)
       48:  285:	d = Date(year, month, day);
        -:  286:    else
        3:  287:	in.setstate(ios::failbit);	// Input failed, so spoil the stream
       51:  288:    return in;
        -:  289:}
        -:  290:
        -:  291:
        1:  292:int main() {
        -:  293:    // Read & display some dates
        2:  294:    ifstream data("data");
        1:  295:    Date d;
        -:  296:    // Read each line, try to convert it to a date, complain if it fails.
       52:  297:    for (string s; getline(data, s); ) {
      102:  298:	istringstream iss(s);	// Initialize stream with string
       51:  299:	if (iss >> d)		// Try to convert to a date
       48:  300:	    cout << d << '\n';
        -:  301:	else
        3:  302:	    cerr << "Bad date \"" << s << "\"\n";
        -:  303:    }
        -:  304:
        1:  305:    const Date a(2009,3,4);
        1:  306:    cout << a << '\n';		// Wed Mar 4 2009
        -:  307:    
        1:  308:    Date n;
        -:  309:    
        1:  310:    n.setday(5);
        1:  311:    cout << n << '\n';
        -:  312: 
        1:  313:    n.setmonth(5);
        1:  314:    cout << n << '\n';
        -:  315: 
        1:  316:    n.setyear(5);
        1:  317:    cout << n << '\n';
        -:  318:    
        1:  319:    n = n+1;
        1:  320:    cout << n << '\n';
        -:  321:
        1:  322:    const Date b(a);
        1:  323:    cout << b << '\n';		// Wed Mar 4 2009
        -:  324:
        1:  325:    Date c; c=a;
        1:  326:    cout << c << '\n';		// Wed Mar 4 2009
        -:  327:
        1:  328:    c = c+1;
        1:  329:    cout << c << '\n';		// Thu Mar 5 2009
        1:  330:    c += 9;
        1:  331:    cout << c << '\n';		// Sat Mar 14 2009
        1:  332:    d = ++c;
        1:  333:    cout << c << '\n';		// Sun Mar 15 2009
        1:  334:    cout << d << '\n';		// Sun Mar 15 2009
        -:  335:
        1:  336:    d = c++;
        1:  337:    cout << c << '\n';		// Mon Mar 16 2009
        1:  338:    cout << d << '\n';		// Sun Mar 15 2009
        -:  339:
        1:  340:    Date e = d-1;
        1:  341:    cout << e << '\n';		// Sat Mar 14 2009
        1:  342:    d = e--;
        1:  343:    cout << d << '\n';		// Sat Mar 14 2009
        1:  344:    cout << e << '\n';		// Fri Mar 13 2009
        1:  345:    d = --e;
        1:  346:    cout << d << '\n';		// Thu Mar 12 2009
        1:  347:    cout << e << '\n';		// Thu Mar 12 2009
        1:  348:    e -= 5;
        1:  349:    cout << e << '\n';		// Sat Mar 7 2009
        1:  350:    e -= -2;
        1:  351:    cout << e << '\n';		// Mon Mar 9 2009
        1:  352:    cout << d-e << '\n';	// 3
        1:  353:    cout << e-d << '\n';	// -3
        -:  354:
        -:  355:    // a==b, a<c
        1:  356:    cout << ((a==b) ? "== good\n" : "== bad\n");
        1:  357:    cout << ((a==c) ? "== bad\n"  : "== good\n");
        1:  358:    cout << ((a!=c) ? "!= good\n" : "!= bad\n");
        1:  359:    cout << ((a!=b) ? "!= bad\n"  : "!= good\n");
        1:  360:    cout << ((a<c)  ? "<  good\n" : "<  bad\n");
        1:  361:    cout << ((a<b)  ? "<  bad\n"  : "<  good\n");
        1:  362:    cout << ((c>a)  ? ">  good\n" : ">  bad\n");
        1:  363:    cout << ((b>a)  ? ">  bad\n"  : ">  good\n");
        1:  364:    cout << ((a<=b) ? "<= good\n" : "<= bad\n");
        1:  365:    cout << ((a<=c) ? "<= good\n" : "<= bad\n");
        1:  366:    cout << ((c<=a) ? "<= bad\n"  : "<= good\n");
        1:  367:    cout << ((a>=b) ? ">= good\n" : ">= bad\n");
        1:  368:    cout << ((c>=a) ? ">= good\n" : ">= bad\n");
        1:  369:    cout << ((a>=c) ? ">= bad\n"  : ">= good\n");
        -:  370:
        1:  371:    return 0;
        3:  372:}
